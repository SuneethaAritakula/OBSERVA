package com.OBSERVAMonitor;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class CommonMethods{
	
	//should I create a separate class rather than common methods? Should I also create a data folder for data to be read from and written to?
		
	
	public static void readandwritedata(WebDriver driver, String string) throws IOException {
		
	FileInputStream file = new FileInputStream("");
	XSSFWorkbook workBook = new XSSFWorkbook();
	XSSFSheet sheet = workBook.getSheet("");
	
			
	
	FileOutputStream file1 = new FileOutputStream("");
	workBook.write(file1);
	
	}}
	
	
 //will these go in utility folder??
	
	/*public class BasePage {

	    private static final int TIMEOUT = 5;
	    private static final int POLLING = 100;

	    protected WebDriver driver;
	    private WebDriverWait wait;

	    public BasePage(WebDriver driver) {
	        this.driver = driver;
	        wait = new WebDriverWait(driver, TIMEOUT, POLLING);
	        PageFactory.initElements(new AjaxElementLocatorFactory(driver, TIMEOUT), this);
	    }

	    protected void waitForElementToAppear(By locator) {
	        wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
	    }

	    protected void waitForElementToDisappear(By locator) {
	        wait.until(ExpectedConditions.invisibilityOfElementLocated(locator));
	    }

	    protected void waitForTextToDisappear(By locator, String text) {
	        wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(locator, text)));
        }}}
    */
	
	
	
	

